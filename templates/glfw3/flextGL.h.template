@require(passthru, functions, enums, options, version, extensions, categories)

#ifndef __gl_h_
#define __gl_h_

#ifdef __cplusplus
extern "C" {
#endif

/* Function declaration macros - to move into glplatform.h */

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#endif

#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif
#ifndef GLAPI
#define GLAPI extern
#endif

/* -------------------------------- DATA TYPES ------------------------------- */

typedef unsigned int	GLenum;
typedef unsigned char	GLboolean;
typedef unsigned int	GLbitfield;
typedef void		GLvoid;
typedef signed char	GLbyte;		/* 1-byte signed */
typedef short		GLshort;	/* 2-byte signed */
typedef int		GLint;		/* 4-byte signed */
typedef unsigned char	GLubyte;	/* 1-byte unsigned */
typedef unsigned short	GLushort;	/* 2-byte unsigned */
typedef unsigned int	GLuint;		/* 4-byte unsigned */
typedef int		GLsizei;	/* 4-byte signed */
typedef float		GLfloat;	/* single precision float */
typedef float		GLclampf;	/* single precision float in [0,1] */
typedef double		GLdouble;	/* double precision float */
typedef double		GLclampd;	/* double precision float in [0,1] */

/* --------------------------------- PASSTHRU -------------------------------- */

@passthru

/* ----------------------------------- ENUMS --------------------------------- */

@enums

/* --------------------------- FUNCTION PROTOTYPES --------------------------- */

@for cat,funcs in functions:

/* GL_@cat */

    @if cat in ['VERSION_1_0', 'VERSION_1_1','VERSION_1_0_DEPRECATED', 'VERSION_1_1_DEPRECATED']:
        @for f in funcs:
GLAPI @f.returntype APIENTRY gl@f.name (@f.param_list_string());
        @end
    @else:
        @for f in funcs:
typedef @f.returntype (APIENTRY PFNGL@f.name.upper()_PROC (@f.param_list_string()));
        @end

        @for f in funcs:
GLAPI PFNGL@f.name.upper()_PROC* glpf@f.name;
        @end

        @for f in funcs:
#define gl@f.name glpf@f.name
        @end
    @end

@end

/* ---------------------- Flags for optional extensions ---------------------- */

@for extension,required in extensions:
extern int FLEXT_@extension;
@end

struct GLFWwindow;
typedef struct GLFWwindow GLFWwindow;

int flextInit(GLFWwindow* window);

@for category in categories:
#define GL_@category
@end

#define FLEXT_MAJOR_VERSION @version.major!s
#define FLEXT_MINOR_VERSION @version.minor!s
@if version.core:
#define FLEXT_CORE_PROFILE 1
@else:
#define FLEXT_CORE_PROFILE 0
@end

#ifdef __cplusplus
}
#endif

#endif /* _gl_h_ */
