// WARNING: This file was automatically generated
// Do not edit.

#raw
#include "flextGL.h"

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#end raw

void flextLoadOpenglFunctions(void);
void * flextGetProcAddress(const char *extname);

int flextInit(void) 
{
    flextLoadOpenglFunctions();

    GLint minor, major;

    glGetIntegerv(GL_MAJOR_VERSION, &major);
    glGetIntegerv(GL_MINOR_VERSION, &minor);

    if (major < $version.major || (major == $version.major && minor < $version.minor)) {
        fprintf(stderr, "Error: OpenGL version $(version.major).$(version.minor) not supported.\n");
        fprintf(stderr, "       Your version is %d.%d.\n", major, minor);
        fprintf(stderr, "       Try updating your graphics driver.\n");
        return GL_FALSE;
    }

#if $version.major >= 3 and $version.minor >=2
    GLint profile;
    
    glGetIntegerv(GL_CONTEXT_PROFILE_MASK, &profile);

#if $version.core
    if ((profile & GL_CONTEXT_CORE_PROFILE_BIT) == 0){ 
        fprintf(stderr, "Error: This application requires a core profile\n");
        return GL_FALSE;
    }
#elif $version.major >= 3 and $version.minor >= 2
    if ((profile & GL_CONTEXT_COMPATIBILITY_PROFILE_BIT) == 0) {
        fprintf(stderr, "Error: This application requires a comptatibility profile\n");
        return GL_FALSE;
    }
#end if
#end if

    GLubyte* extensions;

#if $version.major < 3
    extensions = glGetString(GL_EXTENSIONS);
#else
    size_t size;
    FILE* memstream = open_memstream((char**)&extensions, &size);

    GLint num_extensions;
    glGetIntegerv(GL_NUM_EXTENSIONS, &num_extensions);
    
    int i;

    for (i = 0; i < num_extensions; i++) {
        fprintf(memstream, "%s ", glGetStringi(GL_EXTENSIONS, i));
    }

    fclose(memstream);
#end if

    GLubyte* extensions_backup = extensions;

    while (extensions != NULL) {
        char* ext = strsep((char**)&extensions, " ");

#for $extension,$required in $extensions.iteritems()
        if (strcmp("GL_$(extension)", ext) == 0) {
            FLEXT_$extension = GL_TRUE;
        }
#end for
    }

#if $version.major >= 3
    free(extensions_backup);
#end if

#for $extension,$required in $extensions.iteritems()
    
#if $required:
    if (!FLEXT_$extension) {
        fprintf(stderr, "Error: OpenGL extension $(extension) not supported.\n");
        fprintf(stderr, "       Try updating your graphics driver.\n");
        return GL_FALSE;
    }
#end if   
#end for

    return GL_TRUE;
}


void flextLoadOpenglFunctions(void)
{
    // --- Function pointer loading
#for $category in $categories
#if $functions.has_key($category) and len($functions[$category]) > 0 and $category not in ['VERSION_1_0', 'VERSION_1_1','VERSION_1_0_DEPRECATED', 'VERSION_1_1_DEPRECATED' ]

    // $category

#for $function in $functions[$category]
    glpf$function.name = (PFNGL$(function.name.upper())PROC)flextGetProcAddress("gl$function.name");
#end for
#end if
#end for
}

// ----------------------- Extension flag definitions ---------------------- 
#for $extension,$required in $extensions.iteritems()
int FLEXT_$extension = GL_FALSE;
#end for

// ----------------- Function pointer definitions ----------------

#for $category in $categories
#if $functions.has_key($category) and len($functions[$category]) > 0 and $category not in ['VERSION_1_0', 'VERSION_1_1','VERSION_1_0_DEPRECATED', 'VERSION_1_1_DEPRECATED' ]
#for $function in $functions[$category]
PFNGL$(function.name.upper())PROC glpf$(function.name) = NULL;
#end for
#end if
#end for

#raw

// ProcAddress loader taken from GLEE

#ifdef WIN32
	#define WIN32_LEAN_AND_MEAN
	#include <windows.h>
#elif defined(__APPLE__) || defined(__APPLE_CC__)
    #define GL_GLEXT_LEGACY
	#include <Carbon/Carbon.h>
#else // GLX
	#define __glxext_h_ /* prevent glxext.h from being included */
	#define GLX_GLXEXT_PROTOTYPES
	#include <GL/glx.h>
#endif


void * flextGetProcAddress(const char *extname)
{
#ifdef WIN32
	return (void*)wglGetProcAddress(extname);
#elif defined(__APPLE__) || defined(__APPLE_CC__)
    CFBundleRef bundle;
    CFURLRef bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR("/System/Library/Frameworks/OpenGL.framework"), kCFURLPOSIXPathStyle, true);

    CFStringRef functionName = CFStringCreateWithCString(kCFAllocatorDefault, extname, kCFStringEncodingASCII);

    void *function;

    bundle = CFBundleCreate(kCFAllocatorDefault, bundleURL);
    assert(bundle != NULL);

    function = CFBundleGetFunctionPointerForName(bundle, functionName);

    CFRelease(bundleURL);
    CFRelease(functionName);
    CFRelease(bundle);

    return function;
#else
	return (void*)glXGetProcAddressARB((const GLubyte *)extname);
#endif
}
#end raw
